# üöÄ Mayhem Creations - Full Stack E-commerce Platform Implementation Status

## üìä Current Implementation Status

### ‚úÖ COMPLETED FEATURES

#### Backend Authentication System (100% Complete)
- **Session-based Authentication**: MariaDB session store with express-session
- **Role-Based Access Control**: Multi-role system (super_admin, admin, moderator, customer, seller)
- **Password Security**: bcrypt hashing with 12 salt rounds and complexity validation
- **Account Protection**: Brute force protection with account lockout (5 attempts, 2-hour lockout)
- **Email Verification**: Complete email verification system with token-based validation
- **Email Service**: Nodemailer integration with Gmail SMTP for transactional emails
- **API Endpoints**: Complete CRUD operations for authentication + email verification
- **Security Middleware**: Rate limiting, input validation, and security headers
- **Database Models**: User, Role, Session models with proper associations
- **API Documentation**: Swagger/OpenAPI 3.0 with comprehensive examples

#### Frontend E-commerce Platform (95% Complete)
- **Product Catalog**: Browse, filter, search, and sort products
- **Product Customization**: Interactive design tool with drag-and-drop
- **Shopping Cart**: Persistent cart with localStorage and real-time updates
- **Checkout Process**: Multi-step checkout with payment integration
- **Order Management**: Order history and tracking
- **Responsive Design**: Mobile-first design with Tailwind CSS
- **Authentication UI**: Login, registration, email verification, and session management
- **Multi-Role Support**: Customer, Admin, Seller, and Employee interfaces

#### Admin Panel System (90% Complete)
- **Dashboard**: Analytics and overview with key metrics
- **User Management**: Create, edit, and manage users across all roles
- **Product Management**: Add, edit, and organize products and categories
- **Order Management**: Process orders, track fulfillment, and handle refunds
- **Customer Support**: Message management and FAQ system
- **Analytics**: Sales reports and performance metrics
- **Inventory Management**: Stock tracking and alerts

### üîÑ IMPLEMENTED FLOWS

#### Authentication Flows
1. **User Registration Flow**
   - Input validation (email, password complexity, required fields)
   - Duplicate email check
   - Password hashing with bcrypt
   - Role assignment (default: customer)
   - Database storage with proper associations
   - Email verification token generation
   - Verification email sent via Nodemailer
   - Success response with user details (unverified)
   - Modal stays open with verification message

2. **User Login Flow**
   - Input validation and rate limiting
   - User lookup with role information
   - Account status verification
   - Password verification with bcrypt
   - Email verification check (for customer role)
   - Failed attempt tracking and account lockout
   - Session creation with database tokens
   - Response with session cookie and user profile

3. **Email Verification Flow**
   - Verification token generation (32-byte hex)
   - Token expiration (24 hours)
   - Email template with verification link
   - Frontend verification page (/verify-email)
   - Token validation and user verification
   - Welcome email after successful verification
   - Database update (isEmailVerified: true)

4. **Resend Verification Flow**
   - Email validation and user lookup
   - New token generation
   - Email resend functionality
   - Rate limiting for resend requests
   - Success/error feedback

5. **Session Management Flow**
   - Session creation in MariaDB with expiration
   - Token generation (access: 15min, refresh: 7 days)
   - Database storage with user association
   - HttpOnly, secure, SameSite cookies
   - Activity tracking on each request
   - Automatic cleanup of expired sessions

6. **Role-Based Access Control Flow**
   - Role validation against required permissions
   - Permission mapping for API access rights
   - Cross-role protection against escalation
   - Middleware enforcement on protected routes
   - Audit logging for access attempts and role changes

#### E-commerce Flows
1. **Product Browsing Flow**
   - Category filtering and subcategory selection
   - Search functionality with real-time results
   - Sorting options (price, popularity, newest)
   - Pagination for large product catalogs
   - URL state management for filters

2. **Product Customization Flow**
   - Product selection and base configuration
   - Design upload (images, templates)
   - Interactive positioning and scaling
   - Real-time preview with design guidelines
   - Price calculation with customization costs
   - Add to cart with design specifications

3. **Shopping Cart Flow**
   - Add/remove products with quantity management
   - Persistent storage in localStorage
   - Real-time price calculations
   - Cart synchronization across sessions
   - Guest to authenticated cart merge
   - Inventory validation before checkout

4. **Checkout Process Flow**
   - Multi-step checkout (shipping, payment, review)
   - Form validation and error handling
   - Payment method selection (Stripe, PayPal, Google Pay)
   - Order summary with tax and shipping calculations
   - Order confirmation and tracking information
   - Email notifications and receipts

#### Admin Management Flows
1. **User Management Flow**
   - User listing with filtering and search
   - Role-based user creation and editing
   - Bulk operations (activate, deactivate, delete)
   - User detail views with activity history
   - Permission management and role assignment

2. **Product Management Flow**
   - Product CRUD operations
   - Category and subcategory management
   - Image upload and optimization
   - Inventory tracking and stock management
   - Product visibility and status controls

3. **Order Management Flow**
   - Order listing with status filtering
   - Order detail views with customer information
   - Order status updates and tracking
   - Refund processing and management
   - Order analytics and reporting

### üèóÔ∏è TECHNICAL ARCHITECTURE

#### Backend Architecture
- **Framework**: Express.js with TypeScript
- **Database**: MariaDB with Sequelize ORM
- **Session Management**: express-session with MariaDB store
- **Authentication**: Session-based with database tokens
- **Security**: Helmet, CORS, rate limiting, input validation
- **API Documentation**: Swagger/OpenAPI 3.0
- **Error Handling**: Centralized error handling with structured logging
- **Testing**: Jest with Supertest for API testing

#### Frontend Architecture
- **Framework**: React 18 with TypeScript
- **Build Tool**: Vite for fast development and building
- **Styling**: Tailwind CSS with custom design system
- **State Management**: React Context API for global state
- **Routing**: React Router v6 with protected routes
- **Component Library**: Reusable UI components
- **Performance**: Code splitting and lazy loading

#### Database Schema
- **Users Table**: User information with role associations
- **Roles Table**: Role definitions with permissions
- **Sessions Table**: Session data with user associations
- **Products Table**: Product catalog with categories
- **Orders Table**: Order information with status tracking
- **Cart Table**: Shopping cart persistence (future enhancement)

### üìà PERFORMANCE OPTIMIZATIONS

#### Backend Optimizations
- **Connection Pooling**: MariaDB connection pooling (min: 5, max: 20)
- **Session Caching**: In-memory caching for active sessions
- **Query Optimization**: Indexed database queries
- **Rate Limiting**: API endpoint protection
- **Error Handling**: Graceful error responses

#### Frontend Optimizations
- **Code Splitting**: Lazy loading for admin and e-commerce routes
- **Image Optimization**: Responsive images with proper sizing
- **State Management**: Efficient context updates
- **Bundle Size**: Tree shaking and minimal dependencies
- **Caching**: localStorage for cart and user preferences

### üîí SECURITY IMPLEMENTATIONS

#### Authentication Security
- **Password Hashing**: bcrypt with 12 salt rounds
- **Session Security**: HttpOnly, secure, SameSite cookies
- **Account Lockout**: Brute force protection
- **Role Validation**: Cross-role access prevention
- **Input Validation**: Comprehensive request validation

#### API Security
- **Rate Limiting**: Per-endpoint rate limiting
- **CORS Configuration**: Proper cross-origin settings
- **Security Headers**: Helmet configuration
- **Input Sanitization**: XSS and injection prevention
- **Audit Logging**: Security event tracking

### üöÄ DEPLOYMENT READINESS

#### Backend Deployment
- **Environment Configuration**: Comprehensive .env setup
- **Database Migrations**: Sequelize migration system
- **Health Checks**: API health monitoring
- **Logging**: Structured logging with Winston
- **Error Monitoring**: Centralized error handling

#### Frontend Deployment
- **Build Optimization**: Production-ready builds
- **Environment Variables**: API endpoint configuration
- **Asset Optimization**: Minified and compressed assets
- **CDN Ready**: Static asset optimization
- **PWA Features**: Service worker and manifest (future enhancement)

### üìã NEXT PHASE FEATURES

#### Completed Enhancements
- **Email Verification**: ‚úÖ Complete user email verification system with token-based validation
- **Email Service**: ‚úÖ Nodemailer integration with Gmail SMTP for transactional emails
- **Verification UI**: ‚úÖ Frontend verification page with success/error states
- **Resend Functionality**: ‚úÖ Resend verification email with rate limiting

#### Planned Enhancements
- **Password Reset**: Forgot password functionality
- **Two-Factor Authentication**: TOTP support
- **Social Login**: OAuth integration (Google, Facebook)
- **Payment Integration**: Stripe and PayPal implementation
- **Email Notifications**: Transactional email system
- **Advanced Analytics**: Detailed reporting and insights
- **Mobile App**: React Native mobile application
- **Real-time Features**: WebSocket for live updates
- **Search Engine**: Elasticsearch integration

============================================================
1Ô∏è‚É£ Frontend Framework & Libraries (Enhanced)
============================================================
‚úÖ React + TypeScript ‚Äì Core frontend framework
‚úÖ Vite ‚Äì Faster dev environment + PWA plugin
‚úÖ TailwindCSS ‚Äì Utility-first styling framework
‚ùå Headless UI / Radix UI (optional) ‚Äì Accessible UI primitives
‚úÖ React Router v6+ ‚Äì Navigation
‚ùå Redux Toolkit (with RTK Query) ‚Äì State management & API caching for complex global state
‚úÖ Axios ‚Äì API calls with typed responses
‚ùå React.lazy() + Suspense ‚Äì Code splitting for large product catalogs
‚ùå react-window / react-virtualized ‚Äì Virtual scrolling for product lists
‚ùå react-image / Optimized Image Components ‚Äì Product image optimization
‚ùå Framer Motion ‚Äì Smooth animations for cart/checkout UX
‚ùå Workbox ‚Äì Service worker for offline functionality & caching
‚ùå react-intersection-observer ‚Äì Lazy loading optimization
‚ùå @sentry/react ‚Äì Error monitoring & performance tracking
‚ùå react-helmet-async ‚Äì SEO optimization
‚ùå react-hotjar ‚Äì User behavior analytics
‚ùå algoliasearch / @elastic/search-ui ‚Äì Advanced search UI components

============================================================
2Ô∏è‚É£ Frontend Authentication & Security (Enhanced)
============================================================
‚úÖ Session-based auth with MariaDB ‚Äì Backend managed
‚úÖ Refresh token logic ‚Äì Handled in frontend with typed API responses
‚úÖ RBAC with Enums/Types ‚Äì Safer role checks
‚úÖ CSRF Protection & Secure Cookies ‚Äì Tokens & headers fully typed
‚ùå DOMPurify ‚Äì XSS protection for user-generated content
‚ùå Content Security Policy (CSP) ‚Äì XSS prevention headers
‚ùå @google-cloud/recaptcha-enterprise ‚Äì Bot protection

============================================================
3Ô∏è‚É£ Frontend API Communication (Enhanced)
============================================================
‚úÖ Custom API Wrapper ‚Äì With generics for request/response typing
‚úÖ Global Error Handling ‚Äì Typed error responses
‚úÖ Loading & Toast Notifications ‚Äì Tailwind components for UX
‚ùå Circuit Breaker Pattern ‚Äì Graceful API failure handling
‚ùå Retry Logic ‚Äì Exponential backoff for failed requests
‚ùå Request Deduplication ‚Äì Prevent duplicate API calls
‚ùå Real-time Updates ‚Äì WebSocket integration for cart/inventory

============================================================
  4Ô∏è‚É£ Frontend Project Structure (Enhanced TypeScript + Tailwind)
  ============================================================
  /src
    /shared (‚úÖ Implemented)
      ‚îú‚îÄ‚îÄ authContext.tsx        # Authentication context
      ‚îú‚îÄ‚îÄ multiAccountContext.tsx # Multi-account management
      ‚îú‚îÄ‚îÄ customerApiService.ts  # Customer API service
      ‚îú‚îÄ‚îÄ oauthApiService.ts     # OAuth API service
      ‚îú‚îÄ‚îÄ googleOAuthService.ts  # Google OAuth service
      ‚îú‚îÄ‚îÄ loggingService.ts      # Logging service
      ‚îú‚îÄ‚îÄ autoReplyService.ts    # Auto-reply service
      ‚îú‚îÄ‚îÄ envConfig.ts           # Environment configuration
      ‚îú‚îÄ‚îÄ authStorage.ts         # Auth storage utilities
      ‚îú‚îÄ‚îÄ multiAccountStorage.ts # Multi-account storage
    /api (‚ùå Not implemented as separate structure)
      ‚îú‚îÄ‚îÄ authApi.ts             # Authentication API
      ‚îú‚îÄ‚îÄ userApi.ts             # User API
      ‚îú‚îÄ‚îÄ productApi.ts          # Product catalog, search, filters
      ‚îú‚îÄ‚îÄ cartApi.ts             # Cart operations
      ‚îú‚îÄ‚îÄ orderApi.ts            # Order management
      ‚îú‚îÄ‚îÄ paymentApi.ts          # Payment processing
      ‚îú‚îÄ‚îÄ reviewApi.ts           # Product reviews & ratings
      ‚îú‚îÄ‚îÄ wishlistApi.ts         # Wishlist management
      ‚îú‚îÄ‚îÄ searchApi.ts           # Advanced search with Algolia/Elasticsearch
      ‚îú‚îÄ‚îÄ analyticsApi.ts        # User behavior tracking
      ‚îú‚îÄ‚îÄ axiosInstance.ts       # Pre-configured Axios instance with interceptors
      /types
        ‚îú‚îÄ‚îÄ auth.d.ts
        ‚îú‚îÄ‚îÄ user.d.ts
        ‚îú‚îÄ‚îÄ product.d.ts
        ‚îú‚îÄ‚îÄ cart.d.ts
        ‚îú‚îÄ‚îÄ order.d.ts
        ‚îú‚îÄ‚îÄ payment.d.ts
        ‚îú‚îÄ‚îÄ review.d.ts
        ‚îú‚îÄ‚îÄ wishlist.d.ts
        ‚îú‚îÄ‚îÄ search.d.ts
        ‚îú‚îÄ‚îÄ analytics.d.ts

    /components (‚úÖ Partially Implemented)
      ‚îú‚îÄ‚îÄ Button.tsx            # ‚úÖ Reusable button component
      ‚îú‚îÄ‚îÄ AuthModal.tsx         # ‚úÖ Authentication modal
      ‚îú‚îÄ‚îÄ GoogleOAuthButton.tsx # ‚úÖ Google OAuth button
      ‚îú‚îÄ‚îÄ AccountSwitcher.tsx   # ‚úÖ Account switching component
      ‚ùå Navbar.tsx             # Tailwind-styled navigation bar
      ‚ùå Sidebar.tsx
      ‚ùå ProtectedRoute.tsx     # RBAC
      ‚ùå ErrorBoundary.tsx      # React error boundary
      ‚ùå LoadingSkeleton.tsx    # Skeleton screens
      ‚ùå SearchBar.tsx          # Advanced search with autocomplete
      ‚ùå NotificationCenter.tsx # Toast notifications
      /ecommerce (‚úÖ Implemented)
        ‚îú‚îÄ‚îÄ ProductCard.tsx     # ‚úÖ Product card component
        ‚îú‚îÄ‚îÄ ProductGrid.tsx     # ‚úÖ Product grid layout
        ‚îú‚îÄ‚îÄ CartDrawer.tsx      # ‚úÖ Shopping cart drawer
        ‚îú‚îÄ‚îÄ CheckoutForm.tsx    # ‚úÖ Checkout form
        ‚îú‚îÄ‚îÄ OrderSummary.tsx    # ‚úÖ Order summary
        ‚îú‚îÄ‚îÄ ProductReviews.tsx  # ‚úÖ Product reviews
        ‚îú‚îÄ‚îÄ WishlistButton.tsx  # ‚úÖ Wishlist functionality
        ‚îú‚îÄ‚îÄ CompareProducts.tsx # ‚úÖ Product comparison
        ‚îú‚îÄ‚îÄ ProductImageGallery.tsx # ‚úÖ Image gallery
        ‚îú‚îÄ‚îÄ StockIndicator.tsx  # ‚úÖ Stock status indicator
        ‚îú‚îÄ‚îÄ PriceComparison.tsx # ‚úÖ Price comparison
        ‚îú‚îÄ‚îÄ Navbar.tsx          # ‚úÖ E-commerce navbar
        ‚îú‚îÄ‚îÄ Footer.tsx          # ‚úÖ E-commerce footer
        ‚îú‚îÄ‚îÄ ChatWidget.tsx      # ‚úÖ Customer support chat
      /admin (‚úÖ Implemented)
        ‚îú‚îÄ‚îÄ ProductManager.tsx  # ‚úÖ Product management
        ‚îú‚îÄ‚îÄ OrderFulfillment.tsx # ‚úÖ Order fulfillment
        ‚îú‚îÄ‚îÄ AnalyticsDashboard.tsx # ‚úÖ Analytics dashboard
        ‚îú‚îÄ‚îÄ CustomerSupport.tsx # ‚úÖ Customer support
        ‚îú‚îÄ‚îÄ InventoryManager.tsx # ‚úÖ Inventory management
        ‚îú‚îÄ‚îÄ Sidebar.tsx         # ‚úÖ Admin sidebar
        ‚îú‚îÄ‚îÄ SellerSidebar.tsx   # ‚úÖ Seller sidebar
        ‚îú‚îÄ‚îÄ UserModals.tsx      # ‚úÖ User management modals
        ‚îú‚îÄ‚îÄ CustomerModals.tsx  # ‚úÖ Customer management modals
      /ui (‚úÖ Implemented)      # Reusable UI components

    /hooks (‚úÖ Partially Implemented)
      ‚îú‚îÄ‚îÄ useUsers.ts           # ‚úÖ User management hook (admin)
      ‚ùå useAuth.ts
      ‚ùå useFetch.ts
      ‚ùå useCart.ts
      ‚ùå useProducts.ts
      ‚ùå useOrders.ts
      ‚ùå useSearch.ts
      ‚ùå useWishlist.ts
      ‚ùå useReviews.ts
      ‚ùå useAnalytics.ts
      ‚ùå useIntersectionObserver.ts
      ‚ùå useOfflineStatus.ts
      ‚ùå usePerformanceMonitoring.ts

    /layouts (‚ùå Not implemented as separate structure)
      ‚ùå AdminLayout.tsx
      ‚ùå UserLayout.tsx
      ‚ùå ShopLayout.tsx
      ‚ùå MobileLayout.tsx

    /pages (‚úÖ Implemented)
      /ecommerce (‚úÖ Implemented)
        ‚îú‚îÄ‚îÄ Home.tsx             # ‚úÖ Home page
        ‚îú‚îÄ‚îÄ Products.tsx         # ‚úÖ Product listing
        ‚îú‚îÄ‚îÄ ProductPage.tsx      # ‚úÖ Product detail
        ‚îú‚îÄ‚îÄ Customize.tsx        # ‚úÖ Product customization
        ‚îú‚îÄ‚îÄ Cart.tsx             # ‚úÖ Shopping cart
        ‚îú‚îÄ‚îÄ Checkout.tsx         # ‚úÖ Checkout process
        ‚îú‚îÄ‚îÄ MyOrders.tsx         # ‚úÖ Order history
        ‚îú‚îÄ‚îÄ About.tsx            # ‚úÖ About page
        ‚îú‚îÄ‚îÄ FAQ.tsx              # ‚úÖ FAQ page
        ‚îú‚îÄ‚îÄ Contact.tsx          # ‚úÖ Contact page
      ‚îú‚îÄ‚îÄ VerifyEmail.tsx        # ‚úÖ Email verification page
      /admin (‚úÖ Implemented)
        ‚îú‚îÄ‚îÄ AdminApp.tsx         # ‚úÖ Admin application
        ‚îú‚îÄ‚îÄ SellerApp.tsx        # ‚úÖ Seller application
        ‚îú‚îÄ‚îÄ EmployeeApp.tsx      # ‚úÖ Employee application
        ‚îú‚îÄ‚îÄ Dashboard.tsx        # ‚úÖ Admin dashboard
        ‚îú‚îÄ‚îÄ Products.tsx         # ‚úÖ Product management
        ‚îú‚îÄ‚îÄ Orders.tsx           # ‚úÖ Order management
        ‚îú‚îÄ‚îÄ Customers.tsx        # ‚úÖ Customer management
        ‚îú‚îÄ‚îÄ Users.tsx            # ‚úÖ User management
        ‚îú‚îÄ‚îÄ Inventory.tsx        # ‚úÖ Inventory management
        ‚îú‚îÄ‚îÄ Categories.tsx       # ‚úÖ Category management
        ‚îú‚îÄ‚îÄ Embroidery.tsx       # ‚úÖ Embroidery management
        ‚îú‚îÄ‚îÄ Analytics.tsx        # ‚úÖ Analytics dashboard
        ‚îú‚îÄ‚îÄ Messages.tsx         # ‚úÖ Message management
        ‚îú‚îÄ‚îÄ FAQs.tsx             # ‚úÖ FAQ management
        ‚îú‚îÄ‚îÄ Reviews.tsx          # ‚úÖ Review management
        ‚îú‚îÄ‚îÄ PaymentLogs.tsx      # ‚úÖ Payment logs
        ‚îú‚îÄ‚îÄ PaymentManagement.tsx # ‚úÖ Payment management
        ‚îú‚îÄ‚îÄ RefundManagement.tsx # ‚úÖ Refund management
        ‚îú‚îÄ‚îÄ SystemLogs.tsx       # ‚úÖ System logs
        ‚îú‚îÄ‚îÄ ChatSettings.tsx     # ‚úÖ Chat settings
        ‚îú‚îÄ‚îÄ Profile.tsx          # ‚úÖ User profile
      ‚ùå /Auth
        ‚ùå Login.tsx
        ‚ùå Register.tsx
        ‚ùå ForgotPassword.tsx
        ‚ùå EmailVerification.tsx
      ‚ùå NotFound.tsx
      ‚ùå OfflinePage.tsx

    /store (‚ùå Redux not implemented - using Context API instead)
      /slices
        ‚ùå authSlice.ts
        ‚ùå userSlice.ts
        ‚ùå cartSlice.ts          # Persistent cart state
        ‚ùå productSlice.ts       # Product filters/search state
        ‚ùå orderSlice.ts         # Order management state
        ‚ùå wishlistSlice.ts      # Wishlist/favorites
        ‚ùå searchSlice.ts        # Search state & filters
        ‚ùå reviewSlice.ts        # Product reviews
        ‚ùå uiSlice.ts            # UI state (modals, notifications)
        ‚ùå analyticsSlice.ts     # User behavior tracking
        ‚ùå offlineSlice.ts       # Offline queue management
      ‚ùå store.ts

    /context (‚úÖ Implemented - Using React Context instead of Redux)
      /ecommerce
        ‚îú‚îÄ‚îÄ AuthContext.tsx      # ‚úÖ E-commerce authentication
        ‚îú‚îÄ‚îÄ CartContext.tsx      # ‚úÖ Shopping cart state
        ‚îú‚îÄ‚îÄ CustomizationContext.tsx # ‚úÖ Product customization
        ‚îú‚îÄ‚îÄ ChatContext.tsx      # ‚úÖ Customer support chat
      /admin
        ‚îú‚îÄ‚îÄ AdminAuthContext.tsx # ‚úÖ Admin authentication
        ‚îú‚îÄ‚îÄ AdminContext.tsx     # ‚úÖ Admin state management
        ‚îú‚îÄ‚îÄ RoleContext.tsx      # ‚úÖ Role management
      /shared
        ‚îú‚îÄ‚îÄ multiAccountContext.tsx # ‚úÖ Multi-account switching

    /types
      ‚îú‚îÄ‚îÄ global.d.ts
      ‚îú‚îÄ‚îÄ api.d.ts
      ‚îú‚îÄ‚îÄ analytics.d.ts
      ‚îú‚îÄ‚îÄ seo.d.ts

    /utils
      ‚îú‚îÄ‚îÄ formatDate.ts
      ‚îú‚îÄ‚îÄ validation.ts
      ‚îú‚îÄ‚îÄ formatCurrency.ts
      ‚îú‚îÄ‚îÄ cartUtils.ts
      ‚îú‚îÄ‚îÄ imageOptimization.ts
      ‚îú‚îÄ‚îÄ seoUtils.ts
      ‚îú‚îÄ‚îÄ performanceUtils.ts
      ‚îú‚îÄ‚îÄ offlineUtils.ts
      ‚îú‚îÄ‚îÄ analyticsUtils.ts
      ‚îú‚îÄ‚îÄ securityUtils.ts       # XSS/sanitization helpers

    /styles
      ‚îú‚îÄ‚îÄ globals.css
      ‚îú‚îÄ‚îÄ tailwind.config.ts

    /workers
      ‚îú‚îÄ‚îÄ sw.ts                  # Service worker
      ‚îú‚îÄ‚îÄ offlineSync.ts         # Background sync

    ‚îú‚îÄ‚îÄ App.tsx
    ‚îú‚îÄ‚îÄ main.tsx
    ‚îú‚îÄ‚îÄ routes.tsx
    ‚îú‚îÄ‚îÄ pwa-manifest.json


============================================================
5Ô∏è‚É£ Backend Framework & Libraries (MariaDB Sessions Only)
============================================================
‚úÖ Express.js ‚Äì Core backend framework
‚úÖ Sequelize (with TypeScript) ‚Äì ORM for SQL databases
‚úÖ dotenv ‚Äì Environment variable management
‚úÖ bcrypt ‚Äì Password hashing
‚úÖ cookie-parser ‚Äì Cookie handling
‚úÖ cors ‚Äì Cross-origin resource sharing
‚úÖ helmet ‚Äì Secure HTTP headers
‚úÖ winston ‚Äì Logging
‚ùå nodemailer ‚Äì Email service
‚úÖ Jest + Supertest ‚Äì Testing framework
‚ùå stripe / paypal-rest-sdk ‚Äì Payment processing
‚ùå multer ‚Äì File uploads for product images
‚ùå aws-sdk / cloudinary ‚Äì Cloud storage for images
‚ùå node-cache ‚Äì In-memory caching layer
‚úÖ express-validator ‚Äì Enhanced input validation
‚ùå elasticsearch / @elastic/elasticsearch ‚Äì Advanced search engine
‚ùå bull / bee-queue ‚Äì Job queue for background tasks
‚úÖ express-rate-limit ‚Äì Advanced rate limiting
‚ùå express-slow-down ‚Äì Request throttling
‚ùå newrelic / @sentry/node ‚Äì APM & error monitoring
‚ùå prometheus-api-metrics ‚Äì Performance metrics
‚ùå sharp ‚Äì Image processing & optimization
‚ùå websocket / socket.io ‚Äì Real-time features
‚ùå opossum ‚Äì Circuit breaker pattern
‚ùå joi / zod ‚Äì Schema validation
‚ùå express-brute ‚Äì Brute force protection
‚ùå csurf ‚Äì Enhanced CSRF protection
‚ùå express-mongo-sanitize ‚Äì NoSQL injection prevention
‚ùå dompurify ‚Äì Server-side XSS protection
‚úÖ express-session ‚Äì Session management with MariaDB store
‚úÖ express-mysql-session ‚Äì MariaDB session store
‚úÖ swagger-jsdoc ‚Äì Generate OpenAPI spec from JSDoc comments
‚úÖ swagger-ui-express ‚Äì Interactive API documentation UI
‚úÖ @types/swagger-jsdoc ‚Äì TypeScript support for Swagger
‚úÖ @types/swagger-ui-express ‚Äì TypeScript support for Swagger UI

============================================================
6Ô∏è‚É£ Backend API Documentation & Testing (Enhanced)
============================================================
‚úÖ JSDoc Comments ‚Äì Comprehensive API documentation in code
‚úÖ OpenAPI 3.0 Specification ‚Äì Auto-generated from JSDoc
‚úÖ Swagger UI ‚Äì Interactive API documentation interface
‚úÖ API Schema Definitions ‚Äì Reusable request/response schemas
‚úÖ Request/Response Examples ‚Äì Real-world usage examples
‚úÖ Error Documentation ‚Äì Complete error code and message documentation
‚úÖ Authentication Documentation ‚Äì Session-based auth flow documentation
‚úÖ Rate Limiting Documentation ‚Äì API limits and throttling information
‚úÖ Validation Documentation ‚Äì Input validation rules and error messages
‚úÖ API Versioning Documentation ‚Äì Version management and migration guides
‚úÖ Testing Documentation ‚Äì API testing examples and test data
‚úÖ Postman Collections ‚Äì Ready-to-use API testing collections
‚úÖ API Health Monitoring ‚Äì Service health and status endpoints

============================================================
7Ô∏è‚É£ Backend Authentication & Security (MariaDB Sessions)
============================================================
‚úÖ Session-based auth with MariaDB ‚Äì Database-managed sessions using express-mysql-session
‚úÖ Refresh token logic ‚Äì Stored in MariaDB sessions table with rotation
‚úÖ RBAC (Role-Based Access Control) ‚Äì Managed via roles in DB
‚úÖ CSRF protection & Secure Cookies ‚Äì Using csurf, httpOnly, secure, sameSite
‚úÖ Password reset flow ‚Äì Secure token stored in MariaDB with expiration
üÜï Multi-Factor Authentication (MFA) ‚Äì TOTP with speakeasy, secrets stored in MariaDB
üÜï Account lockout ‚Äì Failed attempt tracking in MariaDB user table
üÜï Session security ‚Äì IP validation, user agent checking stored in sessions
üÜï Password policy enforcement ‚Äì Complexity requirements
üÜï Security headers ‚Äì Comprehensive helmet configuration
üÜï Input sanitization ‚Äì SQL injection & XSS prevention
üÜï API key management ‚Äì Secure external API integration

============================================================
7Ô∏è‚É£ Backend API Communication & Performance (MariaDB-Centric)
============================================================
‚úÖ RESTful API endpoints ‚Äì Standardized, versioned routes (/api/v1/...)
‚úÖ Global Error Handling ‚Äì Centralized middleware with typed error responses
‚úÖ Logging ‚Äì Track key actions (auth, password reset, DB queries)
‚úÖ Rate Limiting ‚Äì Use express-rate-limit to prevent brute-force
‚úÖ In-Memory Caching Strategy (node-cache):
  ‚îú‚îÄ‚îÄ Product catalog data (30min TTL)
  ‚îú‚îÄ‚îÄ Search results (15min TTL)
  ‚îú‚îÄ‚îÄ Category listings (1hr TTL)
  ‚îú‚îÄ‚îÄ User sessions cached from MariaDB (5min TTL)
‚úÖ Database Optimization:
  ‚îú‚îÄ‚îÄ Connection pooling for concurrent requests
  ‚îú‚îÄ‚îÄ Indexes: Products (name, category, price, tags)
  ‚îú‚îÄ‚îÄ Indexes: Orders (user_id, status, created_at)
  ‚îú‚îÄ‚îÄ Indexes: Sessions (session_id, user_id, expires_at)
  ‚îú‚îÄ‚îÄ Session cleanup job for expired MariaDB sessions

üÜï Advanced Performance Features (MariaDB-Focused):
  ‚îú‚îÄ‚îÄ Database Connection:
      ‚îú‚îÄ‚îÄ Read replicas for product queries
      ‚îú‚îÄ‚îÄ Connection pooling with retry logic
      ‚îú‚îÄ‚îÄ Query optimization monitoring
      ‚îú‚îÄ‚îÄ Database sharding strategy (future-ready)
  ‚îú‚îÄ‚îÄ Caching Layers:
      ‚îú‚îÄ‚îÄ Application-level caching with node-cache
      ‚îú‚îÄ‚îÄ MariaDB query cache optimization
      ‚îú‚îÄ‚îÄ CDN integration for static assets
      ‚îú‚îÄ‚îÄ Session data caching from MariaDB
  ‚îú‚îÄ‚îÄ Background Processing:
      ‚îú‚îÄ‚îÄ File-based job queues for email sending
      ‚îú‚îÄ‚îÄ Image processing pipeline
      ‚îú‚îÄ‚îÄ Inventory update jobs
      ‚îú‚îÄ‚îÄ Analytics data processing
      ‚îú‚îÄ‚îÄ Session cleanup scheduled jobs
  ‚îú‚îÄ‚îÄ Real-time Features:
      ‚îú‚îÄ‚îÄ WebSocket for cart synchronization
      ‚îú‚îÄ‚îÄ Live inventory updates
      ‚îú‚îÄ‚îÄ Real-time order tracking
      ‚îú‚îÄ‚îÄ Customer support chat

============================================================
8Ô∏è‚É£ Backend Project Structure (MariaDB Sessions)
============================================================
/src
  /config (‚úÖ Implemented)
    ‚îú‚îÄ‚îÄ database.ts         # ‚úÖ Sequelize config + connection pooling
    ‚îú‚îÄ‚îÄ session.ts          # ‚úÖ MariaDB session store configuration
    ‚îú‚îÄ‚îÄ security.ts         # ‚úÖ Security middleware configuration
    ‚ùå payment.ts          # Stripe/PayPal configuration
    ‚ùå storage.ts          # Cloud storage configuration
    ‚ùå elasticsearch.ts    # Search engine configuration
    ‚ùå queue.ts            # Job queue configuration
    ‚ùå websocket.ts        # WebSocket server setup
    ‚ùå monitoring.ts       # APM & metrics configuration
    ‚ùå cache.ts            # node-cache configuration
  /controllers (‚úÖ Partially Implemented)
    ‚îú‚îÄ‚îÄ authController.ts       # ‚úÖ Auth logic (login, register, refresh, logout, Google OAuth)
    ‚îú‚îÄ‚îÄ userController.ts       # ‚úÖ User CRUD
    ‚îú‚îÄ‚îÄ productController.ts    # ‚úÖ Product CRUD, search, filters
    ‚îú‚îÄ‚îÄ categoryController.ts   # ‚úÖ Category management
    ‚îú‚îÄ‚îÄ variantController.ts    # ‚úÖ Product variants
    ‚ùå cartController.ts       # Cart management
    ‚ùå orderController.ts      # Order processing
    ‚ùå paymentController.ts    # Payment processing
    ‚ùå reviewController.ts     # Product reviews & ratings
    ‚ùå wishlistController.ts   # Wishlist management
    ‚ùå searchController.ts     # Advanced search functionality
    ‚ùå adminController.ts      # Admin panel operations
    ‚ùå analyticsController.ts  # Business analytics
    ‚ùå notificationController.ts # Push notifications
    ‚ùå supportController.ts    # Customer support
  /middlewares (‚úÖ Partially Implemented)
    ‚îú‚îÄ‚îÄ auth.ts             # ‚úÖ Auth middleware (MariaDB sessions, RBAC)
    ‚îú‚îÄ‚îÄ errorHandler.ts     # ‚úÖ Central error handling
    ‚ùå cache.ts            # node-cache middleware
    ‚ùå upload.ts           # File upload middleware
    ‚ùå validation.ts       # Enhanced input validation
    ‚ùå session.ts          # MariaDB session middleware setup
    ‚ùå security.ts         # Comprehensive security middleware
    ‚ùå rateLimiting.ts     # Advanced rate limiting
    ‚ùå circuitBreaker.ts   # Circuit breaker for external APIs
    ‚ùå monitoring.ts       # Performance monitoring
    ‚ùå sanitization.ts     # Input sanitization
    ‚ùå compression.ts      # Response compression
  /models (‚úÖ Implemented)
    ‚îú‚îÄ‚îÄ userModel.ts        # ‚úÖ Sequelize user schema
    ‚îú‚îÄ‚îÄ roleModel.ts        # ‚úÖ RBAC roles
    ‚îú‚îÄ‚îÄ productModel.ts     # ‚úÖ Product schema with indexes
    ‚îú‚îÄ‚îÄ categoryModel.ts    # ‚úÖ Product categories
    ‚îú‚îÄ‚îÄ variantModel.ts     # ‚úÖ Product variants
    ‚îú‚îÄ‚îÄ oauthProviderModel.ts # ‚úÖ OAuth providers
    ‚îú‚îÄ‚îÄ sessionModel.ts     # ‚úÖ MariaDB sessions schema
    ‚îú‚îÄ‚îÄ embroideryOptionModel.ts # ‚úÖ Embroidery options
    ‚îú‚îÄ‚îÄ index.ts            # ‚úÖ Model init + associations
    ‚ùå cartModel.ts        # Shopping cart schema
    ‚ùå orderModel.ts       # Order management
    ‚ùå paymentModel.ts     # Payment records
    ‚ùå reviewModel.ts      # Product reviews & ratings
    ‚ùå wishlistModel.ts    # User wishlists
    ‚ùå inventoryModel.ts   # Stock management
    ‚ùå couponModel.ts      # Discount coupons
    ‚ùå notificationModel.ts # User notifications
    ‚ùå analyticsModel.ts   # User behavior tracking
    ‚ùå supportTicketModel.ts # Customer support
    ‚ùå passwordResetModel.ts # Password reset tokens in MariaDB
    ‚ùå mfaModel.ts         # MFA secrets in MariaDB
  /routes (‚úÖ Partially Implemented)
    ‚îú‚îÄ‚îÄ authRoute.ts        # ‚úÖ Authentication routes + email verification
    ‚îú‚îÄ‚îÄ userRoute.ts        # ‚úÖ User management routes
    ‚îú‚îÄ‚îÄ productRoute.ts     # ‚úÖ Product routes
    ‚îú‚îÄ‚îÄ categoryRoute.ts    # ‚úÖ Category routes
    ‚îú‚îÄ‚îÄ variantRoute.ts     # ‚úÖ Variant routes
    ‚ùå cartRoute.ts
    ‚ùå orderRoute.ts
    ‚ùå paymentRoute.ts
    ‚ùå reviewRoute.ts
    ‚ùå wishlistRoute.ts
    ‚ùå searchRoute.ts
    ‚ùå adminRoute.ts
    ‚ùå analyticsRoute.ts
    ‚ùå webhookRoute.ts     # Payment webhooks
    ‚ùå apiDocsRoute.ts     # API documentation
  /docs
    ‚îú‚îÄ‚îÄ swagger.ts          # Swagger configuration and setup
    ‚îú‚îÄ‚îÄ schemas/            # OpenAPI schema definitions
    ‚îÇ   ‚îú‚îÄ‚îÄ authSchemas.ts  # Authentication schemas
    ‚îÇ   ‚îú‚îÄ‚îÄ userSchemas.ts  # User management schemas
    ‚îÇ   ‚îú‚îÄ‚îÄ productSchemas.ts # Product catalog schemas
    ‚îÇ   ‚îú‚îÄ‚îÄ orderSchemas.ts # Order management schemas
    ‚îÇ   ‚îî‚îÄ‚îÄ commonSchemas.ts # Common response schemas
    ‚îú‚îÄ‚îÄ examples/           # API usage examples
    ‚îÇ   ‚îú‚îÄ‚îÄ authExamples.ts # Authentication examples
    ‚îÇ   ‚îú‚îÄ‚îÄ userExamples.ts # User management examples
    ‚îÇ   ‚îî‚îÄ‚îÄ productExamples.ts # Product catalog examples
    ‚îî‚îÄ‚îÄ templates/          # Documentation templates
        ‚îú‚îÄ‚îÄ apiTemplate.ts  # API endpoint template
        ‚îî‚îÄ‚îÄ schemaTemplate.ts # Schema definition template
  /services (‚úÖ Partially Implemented)
    ‚îú‚îÄ‚îÄ sessionService.ts   # ‚úÖ MariaDB session/token logic
    ‚îú‚îÄ‚îÄ oauthService.ts     # ‚úÖ Google OAuth service
    ‚îú‚îÄ‚îÄ emailService.ts     # ‚úÖ Nodemailer setup + templates
    ‚ùå productService.ts   # Inventory, pricing logic
    ‚ùå cartService.ts      # Cart calculations, validation
    ‚ùå orderService.ts     # Order processing workflow
    ‚ùå paymentService.ts   # Payment gateway integration
    ‚ùå inventoryService.ts # Stock management
    ‚ùå cacheService.ts     # node-cache operations
    ‚ùå imageService.ts     # Image upload/optimization
    ‚ùå searchService.ts    # Elasticsearch operations
    ‚ùå queueService.ts     # Background job management
    ‚ùå notificationService.ts # Push & email notifications
    ‚ùå analyticsService.ts # Business intelligence
    ‚ùå reportingService.ts # Generate business reports
    ‚ùå auditService.ts     # Security audit logging
    ‚ùå backupService.ts    # Database backup operations
    ‚ùå webhookService.ts   # Handle external webhooks
  /jobs
    ‚îú‚îÄ‚îÄ emailJobs.ts        # Email sending jobs
    ‚îú‚îÄ‚îÄ imageJobs.ts        # Image processing jobs
    ‚îú‚îÄ‚îÄ inventoryJobs.ts    # Inventory sync jobs
    ‚îú‚îÄ‚îÄ analyticsJobs.ts    # Data processing jobs
    ‚îú‚îÄ‚îÄ cleanupJobs.ts      # Database cleanup jobs (including sessions)
    ‚îú‚îÄ‚îÄ reportJobs.ts       # Scheduled report generation
    ‚îú‚îÄ‚îÄ sessionJobs.ts      # Session cleanup and maintenance
  /utils
    ‚îú‚îÄ‚îÄ logger.ts           # Winston/Morgan setup
    ‚îú‚îÄ‚îÄ validators.ts       # Input validation
    ‚îú‚îÄ‚îÄ emailTemplates.ts   # Order confirmation templates
    ‚îú‚îÄ‚îÄ priceCalculations.ts # Tax, shipping, discounts
    ‚îú‚îÄ‚îÄ securityUtils.ts    # Security helper functions
    ‚îú‚îÄ‚îÄ performanceUtils.ts # Performance monitoring helpers
    ‚îú‚îÄ‚îÄ testUtils.ts        # Testing utilities
    ‚îú‚îÄ‚îÄ migrationUtils.ts   # Database migration helpers
    ‚îú‚îÄ‚îÄ seedUtils.ts        # Database seeding utilities
    ‚îú‚îÄ‚îÄ sessionUtils.ts     # Session management helpers
    ‚îú‚îÄ‚îÄ encryptionUtils.ts  # OAuth token encryption/decryption (AES-256)
  /tests
    ‚îú‚îÄ‚îÄ unit/               # Unit tests
    ‚îú‚îÄ‚îÄ integration/        # Integration tests
    ‚îú‚îÄ‚îÄ e2e/                # End-to-end tests
    ‚îú‚îÄ‚îÄ fixtures/           # Test data
  ‚îú‚îÄ‚îÄ server.ts             # Express app setup
  ‚îú‚îÄ‚îÄ app.ts                # App entry (attach middlewares & routes)


============================================================
9Ô∏è‚É£ Backend Environment & Scripts (MariaDB-Focused)
============================================================
- .env ‚Üí MariaDB credentials, email SMTP, secrets
  + Stripe/PayPal keys, AWS/Cloudinary credentials
  + monitoring keys, external API keys
  + Security configurations, rate limit settings
  + MariaDB session store configuration

- package.json ‚Üí Scripts:
  - dev ‚Äì Run with nodemon & ts-node
  - build ‚Äì Compile TypeScript ‚Üí dist/
  - start ‚Äì Run compiled build
  - test ‚Äì Run Jest/Mocha tests
  - test:watch ‚Äì Run tests in watch mode
  - test:coverage ‚Äì Generate test coverage reports
  - lint ‚Äì Run ESLint
  - lint:fix ‚Äì Auto-fix linting issues
  - seed ‚Äì Database seeding for products/categories
  - cache:clear ‚Äì Clear node-cache
  - migrate ‚Äì Run database migrations
  - migrate:rollback ‚Äì Rollback migrations
  - search:reindex ‚Äì Rebuild search indexes
  - queue:work ‚Äì Process background jobs
  - monitor ‚Äì Start monitoring dashboard
  - backup ‚Äì Create database backup
  - restore ‚Äì Restore from backup
  - security:audit ‚Äì Run security audit
  - load:test ‚Äì Run load testing
  - docs:generate ‚Äì Generate API documentation from JSDoc
  - docs:serve ‚Äì Serve Swagger UI documentation
  - docs:validate ‚Äì Validate OpenAPI specification
  - docs:export ‚Äì Export OpenAPI spec to JSON/YAML
  - sessions:cleanup ‚Äì Manual session cleanup

============================================================
üîü Enhanced Session Management Strategy (Database Tokens + localStorage)
============================================================

‚úÖ **Dual Session Storage:**
  ‚îú‚îÄ‚îÄ Express-session with MariaDB store (server-side)
  ‚îú‚îÄ‚îÄ Database-stored JWT tokens (access + refresh)
  ‚îú‚îÄ‚îÄ localStorage integration (client-side persistence)
  ‚îú‚îÄ‚îÄ Session model: sessionId, userId, accessToken, refreshToken, expiresAt

‚úÖ **JWT Token Management:**
  ‚îú‚îÄ‚îÄ Access tokens: 15 minutes expiration, stored in database
  ‚îú‚îÄ‚îÄ Refresh tokens: 7 days expiration, stored in database
  ‚îú‚îÄ‚îÄ Token revocation: Database tokens can be revoked on logout
  ‚îú‚îÄ‚îÄ Auto-refresh: Frontend automatically refreshes tokens before expiration

‚úÖ **localStorage Integration:**
  ‚îú‚îÄ‚îÄ User data persistence across browser sessions
  ‚îú‚îÄ‚îÄ Token storage with automatic cleanup on logout
  ‚îú‚îÄ‚îÄ Session validation on app initialization
  ‚îú‚îÄ‚îÄ Activity tracking and token refresh management

‚úÖ **Enhanced Security:**
  ‚îú‚îÄ‚îÄ Database token revocation on logout
  ‚îú‚îÄ‚îÄ Session validation against database on each request
  ‚îú‚îÄ‚îÄ Token rotation on refresh for enhanced security
  ‚îú‚îÄ‚îÄ IP and user agent validation stored in database

‚úÖ **Performance Optimization:**
  ‚îú‚îÄ‚îÄ Session data cached in node-cache (5min TTL)
  ‚îú‚îÄ‚îÄ Database indexes on sessionId, userId, accessToken, refreshToken
  ‚îú‚îÄ‚îÄ Connection pooling for session queries
  ‚îú‚îÄ‚îÄ Batch session cleanup (hourly job)

‚úÖ **Frontend Session Flow:**
  ‚îú‚îÄ‚îÄ Check localStorage on app initialization
  ‚îú‚îÄ‚îÄ Validate session against database
  ‚îú‚îÄ‚îÄ Auto-refresh tokens when needed
  ‚îú‚îÄ‚îÄ Clear localStorage on logout
  ‚îú‚îÄ‚îÄ Handle session expiration gracefully

‚úÖ **Session Monitoring:**
  ‚îú‚îÄ‚îÄ Track active sessions per user in database
  ‚îú‚îÄ‚îÄ Log session creation/destruction with token info
  ‚îú‚îÄ‚îÄ Monitor token usage and refresh patterns
  ‚îú‚îÄ‚îÄ Alert on unusual session or token patterns

============================================================
üîü Enhanced Best Practices (MariaDB-Focused)
============================================================
‚úÖ Use async/await for all DB/API calls
‚úÖ Centralize error handling in middleware
‚úÖ Validate all inputs (express-validator/Sequelize validators)
‚úÖ Secure cookies (httpOnly, secure, sameSite)
‚úÖ Log all critical actions (login, password reset, role changes)
‚úÖ Modularize code for maintainability
‚úÖ Keep frontend + backend types aligned (shared DTOs if possible)
‚ùå Implement proper error boundaries in React
‚ùå Cache frequently accessed data with node-cache
‚ùå Optimize images for web delivery
‚ùå Implement proper inventory management
‚ùå Handle payment failures gracefully
‚úÖ Use database transactions for critical operations (sessions)
‚úÖ Implement proper logging for e-commerce events (auth, user actions)
‚ùå Add monitoring for performance metrics
‚ùå Implement graceful degradation for offline scenarios

üÜï **MariaDB-Specific Best Practices:**
  ‚îú‚îÄ‚îÄ Database Connection Management:
      ‚îú‚îÄ‚îÄ Use connection pooling (min: 5, max: 20 connections)
      ‚îú‚îÄ‚îÄ Implement connection retry logic with exponential backoff
      ‚îú‚îÄ‚îÄ Monitor connection pool metrics
      ‚îú‚îÄ‚îÄ Handle connection timeouts gracefully
  ‚îú‚îÄ‚îÄ Session Management:
      ‚îú‚îÄ‚îÄ Regular session cleanup jobs (every hour)
      ‚îú‚îÄ‚îÄ Monitor session table size and performance
      ‚îú‚îÄ‚îÄ Implement session analytics and monitoring
      ‚îú‚îÄ‚îÄ Use database transactions for session operations
  ‚îú‚îÄ‚îÄ Query Optimization:
      ‚îú‚îÄ‚îÄ Create proper indexes for session, user, and product tables
      ‚îú‚îÄ‚îÄ Use prepared statements for security
      ‚îú‚îÄ‚îÄ Monitor slow query log
      ‚îú‚îÄ‚îÄ Implement query result caching
  ‚îú‚îÄ‚îÄ Data Integrity:
      ‚îú‚îÄ‚îÄ Use foreign key constraints properly
      ‚îú‚îÄ‚îÄ Implement database-level validation
      ‚îú‚îÄ‚îÄ Regular database health checks
      ‚îú‚îÄ‚îÄ Automated backup and recovery procedures

============================================================
üì¶ Enhanced Cart & Checkout Experience (MariaDB-Backed)
============================================================
‚úÖ **Cart State Management:**
  ‚îú‚îÄ‚îÄ Guest Cart: localStorage + Context API (temporary)
  ‚îú‚îÄ‚îÄ Authenticated Cart: Context API (persistent)
  ‚ùå Cart data stored in MariaDB carts table with user_id
  ‚ùå Session-based cart for authenticated users

‚ùå **Cart Synchronization:**
  ‚ùå Guest ‚Üí Authenticated: Merge localStorage cart with MariaDB cart
  ‚ùå Multi-device: Real-time sync via WebSocket + MariaDB updates
  ‚ùå Offline handling: Queue cart mutations, sync on reconnection
  ‚ùå Cart persistence: 30-day retention for authenticated users

‚ùå **Cart Performance:**
  ‚ùå Cart data cached in node-cache (key: user_id)
  ‚ùå Optimistic updates with rollback on error
  ‚ùå Batch cart updates to reduce MariaDB queries
  ‚ùå Real-time inventory validation on cart operations

‚ùå **Cart Security:**
  ‚ùå Validate cart items against current pricing
  ‚ùå Check inventory availability before checkout
  ‚ùå Sanitize cart data on all operations
  ‚ùå Rate limiting on cart modification endpoints

============================================================
üîê Enhanced OAuth & Social Authentication (MariaDB)
============================================================
‚úÖ **OAuth Integration:**
  ‚îú‚îÄ‚îÄ Google OAuth: Store provider data in oauth_providers table
  ‚îú‚îÄ‚îÄ OAuth tokens: Encrypted storage in MariaDB
  ‚ùå Account linking: Link multiple OAuth providers to one account
  ‚úÖ Session creation: Standard MariaDB session after OAuth verification

‚úÖ **Account Management:**
  ‚îú‚îÄ‚îÄ OAuth accounts table: user_id, provider, provider_id, tokens
  ‚ùå Email verification: Skip for pre-verified OAuth emails
  ‚ùå Password optional: Allow OAuth-only accounts
  ‚ùå Account recovery: OAuth providers as recovery method

‚úÖ **Security Implementation:**
  ‚îú‚îÄ‚îÄ Server-side token verification only
  ‚ùå State parameter validation for CSRF protection
  ‚úÖ Secure token storage with encryption
  ‚ùå OAuth token refresh handling

============================================================
üì± Caching Strategy (Without Redis)
============================================================

‚ùå **Application-Level Caching (node-cache):**
  ‚ùå Product catalog: 30min TTL, LRU eviction
  ‚ùå Search results: 15min TTL
  ‚ùå Category data: 1hr TTL
  ‚ùå User sessions: 5min TTL (from MariaDB)
  ‚ùå Shopping cart: 10min TTL (for authenticated users)
  ‚ùå User preferences: 1hr TTL

‚úÖ **Database-Level Caching:**
  ‚úÖ MariaDB query cache enabled
  ‚úÖ InnoDB buffer pool optimization
  ‚úÖ Index optimization for frequently queried data
  ‚úÖ Connection pooling for cache efficiency

‚ùå **Cache Management:**
  ‚ùå Cache warming on application startup
  ‚ùå Selective cache invalidation on data updates
  ‚ùå Cache hit/miss ratio monitoring
  ‚ùå Memory usage monitoring and limits

‚ùå **File-Based Caching:**
  ‚ùå Static asset caching (images, CSS, JS)
  ‚ùå API response caching for heavy queries
  ‚ùå Generated report caching
  ‚ùå Search index caching

============================================================
üîÑ Background Processing (Without Redis)
============================================================

‚ùå **File-Based Job Queue:**
  ‚ùå JSON file-based job storage
  ‚ùå Worker processes for background tasks
  ‚ùå Job retry logic with exponential backoff
  ‚ùå Dead letter queue for failed jobs

‚ùå **Scheduled Tasks:**
  ‚ùå Cron jobs for recurring tasks
  ‚ùå Session cleanup (hourly)
  ‚ùå Cache warming (daily)
  ‚ùå Analytics processing (nightly)
  ‚ùå Email sending queue processing

‚ùå **Task Categories:**
  ‚ùå Email sending (order confirmations, password reset)
  ‚ùå Image processing and optimization
  ‚ùå Inventory synchronization
  ‚ùå Report generation
  ‚ùå Database maintenance tasks

============================================================
üìä Monitoring & Analytics (MariaDB-Centered)
============================================================

‚úÖ **Database Monitoring:**
  ‚úÖ Connection pool metrics
  ‚úÖ Query performance tracking
  ‚úÖ Session table size and cleanup efficiency
  ‚úÖ Slow query analysis

‚ùå **Application Monitoring:**
  ‚ùå node-cache hit/miss ratios
  ‚ùå API response times
  ‚ùå Error rates and patterns
  ‚ùå Background job processing metrics

‚ùå **Business Analytics:**
  ‚ùå Sales data stored in MariaDB
  ‚ùå User behavior tracking
  ‚ùå Cart abandonment analysis
  ‚ùå Product performance metrics

‚úÖ **Security Monitoring:**
  ‚úÖ Failed authentication attempts
  ‚úÖ Session anomalies
  ‚ùå Suspicious user patterns
  ‚ùå Payment fraud indicators